package com.myclass.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.myclass.entity.ServiceInfo;
import com.myclass.entity.User;
import com.myclass.service.UserService;

@RestController
@RequestMapping("api/auth")
public class UserController {
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@RequestMapping(value = "/sign-in", method = RequestMethod.POST)
	public Object post(@RequestBody User user) {		
		try {			
			ServiceInfo info = userService.add(user);
			if(info.isStatus()==true) {				
				info.setMessage(info.getMessage() + "\n" 
			    + "\"firstName\": " +"\""+info.getUser().getFirstName() +"\","+"\n"
			    + "\"lastName\": " +"\""+info.getUser().getLastName() +"\","+"\n"
			    + "\"email\": " +"\""+info.getUser().getEmail() +"\","+"\n"
			    + "\"displayName\": " +"\""+ info.getUser().getFirstName()+" "+info.getUser().getLastName() +"\""
				);
				return new ResponseEntity<String>(info.getMessage(), HttpStatus.OK);
			}
			else {
				return new ResponseEntity<String>(info.getMessage(), HttpStatus.BAD_REQUEST);
			}
			
		} catch (Exception e) {
			return new ResponseEntity<HttpStatus>(HttpStatus.BAD_REQUEST);
		}
		
	}
	
	@RequestMapping(value = "login", method = RequestMethod.POST)
	public Object login(@RequestBody User user) {
		try {
			Authentication authentication = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(userDto.getUsername(), userDto.getPassword()));
			SecurityContextHolder.getContext().setAuthentication(authentication);
			String token = generateToken(authentication);
			UserDto user = userService.getByUserName(userDto.getUsername());
			user.setToken(token);
			return new ResponseEntity<UserDto>(user, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ResponseEntity<String>("Wrong name or pass word", HttpStatus.BAD_REQUEST);
		
	}
	private String generateToken(Authentication authentication) {
		final String JWT_SECRET = "chuoi_bi_mat";
		final long JWT_EXPIRATION = 864000000L;
		Date now = new Date();
		Date expiryDate = new Date(now.getTime()+JWT_EXPIRATION);
		UserDetails userDetails = (UserDetails) authentication.getPrincipal();
		String token = Jwts.builder()
				.setSubject(userDetails.getUsername())
				.setIssuedAt(now)
				.setExpiration(expiryDate)
				.signWith(SignatureAlgorithm.HS512, JWT_SECRET)
				.compact();
		return token;
	}
	

}
